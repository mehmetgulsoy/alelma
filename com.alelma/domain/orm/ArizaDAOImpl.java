/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Sat Feb 03 11:50:55 EET 2018
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package com.alelma.domain.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import com.alelma.domain.*;
import com.alelma.domain.dao.ArizaDAO;
import java.util.Date;
import javax.annotation.Resource;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import org.apache.commons.dbutils.QueryRunner;

/**
 * This class provides methods to populate DB Table of ariza
 */
public class ArizaDAOImpl implements ArizaDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO ariza ("
        + "tanim, teslim_tarih, uzun_tanim"
        + ") VALUES ( ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "id, tanim, teslim_tarih, uzun_tanim, kayit_tarih "
        + "FROM ariza WHERE "
        + "id = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE ariza SET "
        + "tanim = ?, teslim_tarih = ?, uzun_tanim = ?, kayit_tarih = ? "
        + "WHERE "
        + "id = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM ariza WHERE "
        + "id = ?";
    
    //@Resource(name = "postgresDeneme")
    private DataSource ds;

    public ArizaDAOImpl() {
    /*    try {
            Context ctx = new InitialContext();
            ds = (DataSource)ctx.lookup("java:comp/env/jdbc/postgres");
        } catch (NamingException e) {
            e.printStackTrace();
        }
        */
    
        try {
            Context ctx = new InitialContext();
            ds = (DataSource)ctx.lookup("java:comp/env/jdbc/postgres");
        } catch (NamingException e) {
            e.printStackTrace();
        }
        
    }   
    
    private static Date date2Sqldate(Date date){
      return (date != null) ? new java.sql.Date(date.getTime()) : null;  
    }
 
    
    
    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.     
     * @exception    SQLException if something is wrong.
     */
    @Override
    public void create(Ariza bean) throws SQLException {
        QueryRunner run = new QueryRunner(ds);   
         
        run.update(SQL_INSERT,
                bean.getTanim(),
                date2Sqldate(bean.getTeslimTarih()),
                bean.getUzunTanim()
        );
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Ariza load(ArizaKey key) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection conn = null;
        try {
            conn = ds.getConnection();
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setLong(1, key.getId());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Ariza) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Ariza bean) throws SQLException {
        PreparedStatement ps = null;
        Connection conn      = null;   
        try {
            conn = ds.getConnection();
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getTanim());
            if (bean.getTeslimTarih() != null)
                ps.setDate(2, new java.sql.Date(bean.getTeslimTarih().getTime()));
            else
                ps.setNull(2, Types.DATE);
            ps.setString(3, bean.getUzunTanim());
            if (bean.getKayitTarih() != null)
                ps.setDate(4, new java.sql.Date(bean.getKayitTarih().getTime()));
            else
                ps.setNull(4, Types.DATE);
            ps.setLong(5, bean.getId());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(ArizaKey key) throws SQLException {
        PreparedStatement ps = null;
        Connection conn      = null;  
        try {
            conn      = ds.getConnection();  
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setLong(1, key.getId());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Ariza> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Ariza>();
        while (rs.next()) {
            Ariza bean = new Ariza();
            bean.setId(rs.getLong("id"));
            bean.setTanim(rs.getString("tanim"));
            bean.setTeslimTarih(rs.getDate("teslim_tarih"));
            bean.setUzunTanim(rs.getString("uzun_tanim"));
            bean.setKayitTarih(rs.getDate("kayit_tarih"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }

    
}